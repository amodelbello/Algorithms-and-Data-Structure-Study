* To Learn
  - [ ] Recursion:
  - [ ] Learn about tail call recursion
  - [ ] Three stages of recursion: pre, recurse, post
  - Sorting:
  - [ ] Heap Sort
  - [ ] Merge Sort
  - Trees:
  - [ ] 3 different ways to traverse a tree
  - [ ] Tree comparison
  - [ ] AVL trees
  - [ ] Red-Black trees
  - [ ] 2-3-4 trees
  - Graphs:
  - [ ] minimum spanning tree
  - [ ] topological sort
  - [ ] Bidirectional search
  - [ ] Floyd--Warshall algorithm
  - [ ] Bellman-Ford algorithm
  - [ ] Graph Coloring
  - Misc:
  - [ ] Find more examples of uses for stacks and queues
  - [X] Greedy Algorithms vs?
  - [ ] LRU Cache
  - [ ] Circular linked list
  - [ ] Radix? something or other?
  - [ ] Two pointer technique (2-sum, 3-sum) <- this is cool!

* To Implement
  - [ ] Binary Search Tree
  - [ ] Min/Max Heap
  - [ ] Trie Tree

* Things to memorize about JavaScript
** Objects
    1. Object.values
    2. Object.keys
    3. Object.entries
** String manipulation
    1. slice()
    2. substr()
    3. substring()
** Array manipulation
    1. subarray from beginning
    2. subarray from end
    3. Same with strings
    4. Array.includes() ?
    5. Do push, pop, shift, unshift mutate?
    6. for each with index: forEach((element, index) => { /* â€¦ */ })
    7. sort ascending
       arr.sort((a, b) => a - b)
    8. sort descending
       arr.sort((a, b) => b - a)
** Math
    1. Math.sqrt()
    2. Math.floor()
    3. Math.ceil()

* Interesting things (maybe language specific)
  - Arrays of numbers sort faster than arrays of strings
  - Comparisons are faster than assignments
